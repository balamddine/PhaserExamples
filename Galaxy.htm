<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Galaxy on fire</title>
     <script src="js/phaser.js" type="text/javascript"></script>
     <link rel="shortcut icon" type="image/x-icon" href="img/Galaxy/ship5.png" />
     
     <script type="text/javascript">
         var cw = 500, ch = 500;
         var game = new Phaser.Game(cw, ch, Phaser.AUTO, '');
         var player,
          plrLifes,
          plrlife,
          bullets,
          explosions,
          lvl = 1,
          enemies,
          enemyBullets,
          starfield,
          cursors,
          plrspeed = 200,
          selectedShip,
          selectedBullet,
          fireButton,
          bulletTime = 0,
          enyblt,
          EnemyBulletTimer = 0;
         // Game States
         var intro = function (game) { };
         var Main = function (game) { };

         intro.prototype = {
             preload: function () {
                 game.load.image('starfield', 'img/Galaxy/starfield.png');
                 game.load.image('ship1', 'img/Galaxy/ship1.png');
                 game.load.image('ship2', 'img/Galaxy/ship2.png');
                 game.load.image('ship3', 'img/Galaxy/ship3.png');
                 game.load.image('ship4', 'img/Galaxy/ship4.png');
                 game.load.image('ship5', 'img/Galaxy/ship5.png');

             },
             create: function () {
                 starfield = game.add.tileSprite(0, 0, cw, ch, 'starfield');
                 var g = game.add.graphics(); g.lineStyle(2, 0xFFFFFF, 1); // init the graphic element and init his color
                 var Shipgroup = game.add.group();
                 for (i = 1; i < 6; i++) {
                     if (i == 5) { y = 240; } else { y = 235; }
                     var ship = Shipgroup.create(80 * i, y, "ship" + i + "");
                     ship.inputEnabled = true;
                     ship.events.onInputDown.add(ShipClick, this);
                     ship.events.onInputOver.add(ShipOver, this);
                     ship.events.onInputOut.add(ShipOut, this);
                 }

                 var text = "please choose your ship";
                 var style = { font: "18px Arial", fill: "#FFFFFF", align: "center" };
                 // draw circles borders on each ship
                 for (j = 1; j < 6; j++) {
                     g.drawCircle(j*80+15, 250, 25);
                 }
                 game.add.text(160, 200, text, style);
             },
             update: function () {
                 starfield.tilePosition.y += 2;
             }
         }// end Intro
         var kll = 0;
         Main.prototype = {
             preload: function () {
                 game.load.image('starfield', 'img/Galaxy/starfield.png');
                 game.load.spritesheet('enemy', 'img/Galaxy/enemy.png', 32, 32);
                 game.load.spritesheet('kaboom', 'img/Galaxy/explode.png', 128, 128);
                 if (selectedShip != typeof (undefined) && selectedShip != null) {
                     game.load.image('ship', "img/Galaxy/" + selectedShip + ".png");
                 }
                 if (selectedBullet != typeof (undefined) && selectedBullet != null) {
                     game.load.image('bullet', "img/Galaxy/" + selectedBullet + ".png");
                 }
             },
             create: function () {
                 game.physics.startSystem(Phaser.Physics.ARCADE);
                 starfield = game.add.tileSprite(0, 0, cw, ch, 'starfield');
                 player = game.add.sprite(250, ch - 30, 'ship');
                 player.anchor.setTo(0.5, 0.5);
                 CreatePlayerBullets();
                
                 CreateEnemies(2,8);
                 CreateExplosionPool();
                 CreatePlayerLife();
                 CreateEnemiesBullet();
             var Missiontext = game.add.text(160, 200, "Mission " + lvl, { font: "18px Arial", fill: "#FFFFFF", align: "center" });
                 game.add.tween(Missiontext).to({ x: 500, y: -530, alpha: 0 }, 3500, Phaser.Easing.Linear.None, true);
                 game.physics.enable(player, Phaser.Physics.ARCADE);
                 cursors = game.input.keyboard.createCursorKeys();
                 fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

             },
             update: function () {
                 starfield.tilePosition.y += 2;
                 player.body.velocity.setTo(0, 0);
                 if (cursors.left.isDown) {
                     player.body.velocity.x = -plrspeed;
                     if (player.body.x <= 0) player.body.x = 0; // prevent player from leaving borders
                 }
                 if (cursors.right.isDown) {
                     player.body.velocity.x = plrspeed;
                     if (player.body.x > (cw - 28)) player.body.x = cw - 28; // prevent player from leaving borders
                 }
                 if (cursors.up.isDown) {
                     player.body.velocity.y = -plrspeed;
                     if (player.body.y <= 0) player.body.y = 0; // prevent player from leaving borders
                 }
                 if (cursors.down.isDown) {
                     player.body.velocity.y = plrspeed;
                     if (player.body.y > (ch - 65)) player.body.y = ch - 65; // prevent player from leaving borders
                 }
                 if (fireButton.isDown) {
                     fireBullet();
                 }
                 if (game.time.now > EnemyBulletTimer) {
                     enemyFires();
                 }
                 game.physics.arcade.overlap(bullets, enemies, collisionBulletEnemyHandler, null, this);
                 game.physics.arcade.overlap(enemyBullets, player, enemyHitsPlayer, null, this);
             }, //end update
             render: function () {

             }
         }//end Main

         game.state.add("intro", intro);
         game.state.add("Main", Main);
         game.state.start("intro");
         function CreateExplosion(obj) {
             obj.x = 0.5;
             obj.anchor.y = 0.5;
             obj.animations.add('kaboom');
         }
         function CreatePlayerBullets() {
             bullets = game.add.group();
             bullets.enableBody = true;
             bullets.physicsBodyType = Phaser.Physics.ARCADE;
             bullets.createMultiple(30, "bullet");
             bullets.setAll('anchor.x', 0.5);
             bullets.setAll('anchor.y', 1);
             bullets.setAll('outOfBoundsKill', true);
             bullets.setAll('checkWorldBounds', true);
         }
         function CreateEnemiesBullet() {
             enemyBullets = game.add.group();
             enemyBullets.enableBody = true;
             enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
             enemyBullets.createMultiple(30, "bullet");
             enemyBullets.setAll('anchor.x', 0.5);
             enemyBullets.setAll('anchor.y', 1);
             enemyBullets.setAll('outOfBoundsKill', true);
             enemyBullets.setAll('checkWorldBounds', true);
         }

         function enemyHitsPlayer(player, bullet) {

             bullet.kill();

             plrlife = plrLifes.getFirstAlive();

             if (plrlife) {
                 plrlife.kill();
             }

             //  And create an explosion :)
             var explosion = explosions.getFirstExists(false);
             explosion.reset(player.body.x, player.body.y);
             explosion.play('kaboom', 30, false, true);

             // When the player dies
             if (plrLifes.countLiving() < 1) {
                 player.kill();
                 enemyBullets.callAll('kill');

                // stateText.text = " GAME OVER \n Click to restart";
                // stateText.visible = true;

                 //the "click to restart" handler
               //  game.input.onTap.addOnce(restart, this);
             }

         }
         function CreateExplosionPool() {
             //  An explosion pool
             explosions = game.add.group();
             explosions.createMultiple(30, 'kaboom');
             explosions.forEach(CreateExplosion, this);
         }
         function CreatePlayerLife() {
             plrLifes = game.add.group();
             for (g = 0; g < 3; g++) {
                 var lv = plrLifes.create(15 + (30 * g), ch - 18, 'ship');
                 lv.anchor.setTo(0.5, 0.5);
                 lv.alpha = 0.5;
             }
         }
         function CreateEnemies(rows,cols) {
             //enemy group
             enemies = game.add.group();
             enemies.enableBody = true;
             enemies.physicsBodyType = Phaser.Physics.ARCADE;
            for (var y = 0; y < rows; y++) {
                 for (var x = 0; x < cols; x++) {
                     var alien = enemies.create(x * 48, y * 50, 'enemy');
                     alien.anchor.setTo(0.5, 0.5);
                     alien.animations.add('fly', [0, 1, 2, 3], 20, true);
                     alien.play('fly');
                     alien.body.moves = false;
                 }
             }
             var tween = game.add.tween(enemies).to({ x: 150 }, 2300, Phaser.Easing.Linear.None, true, 0, 1000, true);
             tween.onLoop.add(function () { enemies.y+=10 }, this);
         }
         function enemyFires() {
             
             //  Grab the first bullet we can from the pool
             enyblt = enemyBullets.getFirstExists(false)
             if (enyblt) {
                 //var random = game.rnd.integerInRange(0, enemies.length - 1);
                 var shooter = enemies.getRandom(0, enemies.length - 1);
                 //if (shooter != -1) {
                     // And fire the bullet from this enemy
                     enyblt.reset(shooter.x, shooter.y - 8);
                     game.physics.arcade.moveToObject(enyblt, player, 120);
                     EnemyBulletTimer = game.time.now + 2000;
                // }
             }
            
         }
         function collisionBulletEnemyHandler(bullet, enemy) {
             bullet.kill();
             enemy.kill();
             var explosion = explosions.getFirstExists(false);
             explosion.reset(enemy.body.x, enemy.body.y);
             explosion.play('kaboom', 30, false, true);
             if (enemies.countLiving() == 0) { // if all enemies are killed 
                 game.add.text(200, 200, 'you Win... ', { font: '25px Arial', fill: '#fff' });
                 game.add.tween(player).to({ y: -200, alpha: 0 }, 2300, Phaser.Easing.Linear.None, true);
                 
             }
         
         }
         function ShipClick(sprite, pointer) {
             var index = sprite.key.slice(-1);
             selectedBullet = "bullet" + index;
             selectedShip = sprite.key;
             game.state.start("Main");
         
          }
         function ShipOver(sprite, pointer) { game.canvas.style.cursor = "pointer"; }
         function ShipOut(sprite, pointer) { game.canvas.style.cursor = "default"; }
         function fireBullet() {

             //  To avoid them being allowed to fire too fast we set a time limit
             if (game.time.now > bulletTime) {
                 //  Grab the first bullet we can from the pool
                 bullet = bullets.getFirstExists(false);

                 if (bullet) {
                     //  And fire it
                     bullet.reset(player.x, player.y + 8); // set the image at the given coordinate
                     bullet.body.velocity.y = -plrspeed * 2;
                     bulletTime = game.time.now + plrspeed;
                 }
             }

         }

     </script>
</head>
<body>
<div id="kll" ></div>
</body>
</html>
